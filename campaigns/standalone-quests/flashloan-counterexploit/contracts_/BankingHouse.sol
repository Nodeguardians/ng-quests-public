// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@openzeppelin/contracts/interfaces/IERC20.sol";

contract BankingHouse {

    uint256 constant REQUIRED_COLLATERAL = 1000 ether;
    IERC20 public immutable gold;
    IERC20 public immutable coin;

    bool paused = false;

    mapping(address => uint256) deposits;

    constructor(IERC20 _gold, IERC20 _coin) {
        gold = _gold;
        coin = _coin;
    }

    function deposit(uint256 amount) external {
        if (paused) { return; }

        gold.transferFrom(msg.sender, address(this), amount);
        deposits[msg.sender] += amount;
    }

    function transactCoin(int256 amount) external {
        if (amount > 0) {
            require(
                deposits[msg.sender] >= REQUIRED_COLLATERAL, 
                "Borrower has insufficient gold collateral"
            );
            coin.transfer(msg.sender, uint256(amount));
        } else {
            coin.transferFrom(
                msg.sender,
                address(this), 
                uint256(-amount)
            );
        }
    }

    function withdraw(uint256 amount) external {
        if (paused) { return; }
        
        deposits[msg.sender] -= amount;
        gold.transfer(msg.sender, amount);
    }

    function setPaused(bool _paused) external {
        paused = _paused;
    }
}
